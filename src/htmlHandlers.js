const sessionContainer = document.getElementById("sessionContainer");

if (!localStorage.pitchrSessions || localStorage.pitchrSessions == ""){
    localStorage.pitchrSessions = JSON.stringify([{
        name: "Default",
        history: []
    }]);
}

function addSessionCard(name){
    let child = document.createElement("div");
    child.innerText = name;
    child.className = "session-card prevent-select";
    sessionContainer.appendChild(child);
}

function populateSessionCards(){
    for (let session of JSON.parse(localStorage.pitchrSessions)){
        addSessionCard(session.name);
    }
}

populateSessionCards();
sessionContainer.children[0].selected = true;
displaySessionSelection();

sessionContainer.getSelectedIndex = () => {
    for(let i = 0; i < sessionContainer.children.length; i++){
        if (sessionContainer.children[i].selected){
            return i;
        }
    }

    console.error("Could not find a selected session");

    return -1;
}

function displaySessionSelection(){
    for (let child of sessionContainer.children){
        if (child.selected){
            child.style.background = "#2a2a88ff";
            child.style.color = "#fff";
        }
        else{
            child.style.background = "#0000"
            child.style.color = "#ccc";
        }
    }
}

function setupSessionButtonEventHandlers(){
    for (let child of sessionContainer.children){
        child.onclick = e => {
            for (let c of sessionContainer.children){
                c.selected = false;
            }
            e.target.selected = true;
    
            displaySessionSelection();
        }
    }
}

setupSessionButtonEventHandlers();

const newSessionButton = document.getElementById("newSessionButton");

let autoGeneratedSessionNames = [];

newSessionButton.onclick = () => {
    Swal.fire({
        title: "New Session",
        input: "text",
        showCancelButton: true
    }).then(res => {
        if (res.isConfirmed){
            let name = res.value;
            if (name === ""){
                name = "New Session"
            }

            let sessionList = JSON.parse(localStorage.pitchrSessions);
            let existingSessionNames = sessionList.map(s => s.name);

            for (let session of sessionList){
                if (name === session.name){
                    for (let i = 0; i < sessionList.length + 1; i++){
                        let copyName = `${name} (${i+1})`;
                        if (!existingSessionNames.includes(copyName)){
                            name = copyName;
                            break;
                        }
                    }

                    break;
                }
            }

            sessionList.push({
                name: name,
                history: []
            });

            localStorage.pitchrSessions = JSON.stringify(sessionList);

            addSessionCard(name);

            setupSessionButtonEventHandlers();
        }
    });
}

// go to next note by pressing right arrow key or clicking next
window.addEventListener("keydown", ev => {
    if(ev.key === " "){
        play();
    }
});

// go to next note by pressing right arrow key or clicking next
window.addEventListener("keydown", ev => {
    if(ev.key === "ArrowRight"){
        nextButton.click();
    }
});

const nextButton = document.getElementById("nextButton");
nextButton.onclick = () => {
    newChallenge();
    play();
}

const autoplayCheckbox = document.getElementById("autoplayCheckbox");

const scrambleButton = document.getElementById("scrambleButton");
scrambleButton.checked = false;

scrambleButton.onclick = () => {
    scrambleButton.checked = !scrambleButton.checked;
    if (scrambleButton.checked){
        scrambleButton.innerText = "Stop Clearing My Relative Pitch"
        scramble();
    }
    else{
        scrambleButton.innerText = "Clear My Relative Pitch"
        stopScrambling = true;
    }
}


const answerInput = document.getElementById("answerInput");
answerInput.oninput = () => {
    if (Object.keys(noteToNum).includes(answerInput.value) || answerInput.value === ''){
        answerInput.style.background = "#fff";
    }
    else {
        answerInput.style.background = "#f88";
    }
}
answerInput.onkeydown = e => {
    return e.which !== 32;
}
const submitAnswerButton = document.getElementById("submitAnswerButton");

submitAnswerButton.onclick = () => {
    if (answerInput.value){
        checkAnswer(answerInput.value);
    }
}

window.addEventListener("keypress", ev => {
    if (ev.key == "Enter" && document.activeElement == answerInput){
        checkAnswer(answerInput.value);
    }
})


function logb(base, x) {
    return Math.log(x) / Math.log(base);
}

function convertSliderValueToAmplitude(sliderVal) {
    // use exponential scale to go from 0 to 1 so the volume slider feels more natural
    const tension = 50; // how extreme the curve is (higher = more extreme, slower start faster end)
    const n = 1 / (1 - logb(1 / tension, 1 + (1 / tension)));         
    const val = Math.pow(1 / tension, 1 - (sliderVal / 100) / n) - 1 / tension;
    return val;
}

const globalVolumeSlider = document.getElementById("globalVolumeSlider");

globalVolumeSlider.value = parseInt(globalVolumeSlider.max) / 2;
globalVolumeSlider.oninput = e => {
    const value = globalVolumeSlider.valueAsNumber;
    soundOn = value >= 1;
    if (!soundOn){
        Howler.stop();
    }
    Howler.volume(convertSliderValueToAmplitude(value));
}

globalVolumeSlider.onmouseup = e => e?.target.blur();

const audioSampleDropdown = document.getElementById("audioSampleDropdown");
const audioSampleFileInput = document.createElement('input');
audioSampleFileInput.type = 'file';
audioSampleFileInput.multiple = false;
audioSampleFileInput.accept = ".wav,.mp4,.mp3,.ogg,.aiff,.flac,.m4a,.aac,.wmv,.wma,.alac"

audioSampleDropdown.oninput = e => {
    e?.target.blur();
    initSound()
}

const playPauseBtn = document.getElementById("playpausebtn");
playPauseBtn.onclick = e => {
    e?.target.blur();
    play();
}